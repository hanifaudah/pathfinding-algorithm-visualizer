{"version":3,"sources":["components/DropDown.js","redux/modules/grid/index.js","redux/reducers.js","redux/store.js","algorithms/index.js","utils/constants.js","utils/funcs.js","components/MenuBar.js","components/Grid.js","App.js","serviceWorker.js","index.js"],"names":["CSS","styled","div","DropDown","setState","placeholder","children","defaultValue","useEffect","onChange","e","target","value","disabled","Item","grid","createSlice","name","initialState","gridWidth","gridHeight","cellWidth","startCellIndex","endCellIndex","status","curAlgo","pathDrawn","reducers","setStartCellIndex","state","payload","oldStart","document","querySelector","classList","remove","add","setEndCellIndex","oldEnd","setStatus","setGridDimensions","width","height","setCurAlgo","setPathDrawn","actions","rootReducer","combineReducers","gridReducer","toastr","toastrReducer","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","persistStore","getState","GRID_WIDTH","GRID_HEIGHT","START_INDEX","END_INDEX","NUM_OF_CELLS","ANIMATE","subscribe","cellIsFarLeft","cellNum","cellIsFarRight","cellIsFarTop","cellIsFarBottom","getXPos","getYPos","animationFinished","dispatch","COLOR","VISITED","verbose","color","START","END","EXPLORED","DEFAULT","PATH","WALL","NONE","STATUS","WEIGHTED_ALGORITHMS","DIJKSTRA","displayName","func","isValidCell","cur","cellsDict","frontier","PriorityQueue","a","b","aDist","distance","bDist","idx","Infinity","prev","isVisited","adjacent","enqueue","timeouts","delayedQ","Queue","isEmpty","dequeue","push","setTimeout","addCellState","length","sourceDistance","adjacentList","i","adj","newDistance","cellContains","info","curIdx","path","reverse","error","ASTAR","f","h","g","Math","abs","newDist","clear","UNWEIGHTED_ALGORITHMS","clearCell","contains","resetPath","querySelectorAll","forEach","el","clearWalls","MenuBar","useDispatch","useSelector","StatusButton","checkedStatus","className","onClick","console","log","val","Object","keys","map","key","message","getDirections","props","colorClasses","animate","Grid","arr","handleCellClick","onMouseDown","event","preventDefault","buttons","onMouseOver","onMouseUp","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","timeOut","newestOnTop","preventDuplicates","position","transitionIn","transitionOut","progressBar","closeOnToastrClick","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a19b2740.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst CSS = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  select {\r\n    outline: none;\r\n    border: none;\r\n    background: rgb(255, 198, 64);\r\n    padding: 0.2em 0.5em;\r\n    border-radius: 0.2em;\r\n    cursor: pointer;\r\n    margin: 0 1em;\r\n    font-weight: 400;\r\n    font-size: 1em;\r\n    color: white;\r\n  }\r\n\r\n  option {\r\n    background: white;\r\n    color: black;\r\n  }\r\n`;\r\n\r\nconst DropDown = ({ setState, placeholder, children, defaultValue }) => {\r\n  useEffect(() => {\r\n    setState(defaultValue);\r\n  }, []);\r\n  return (\r\n    <CSS>\r\n      <select\r\n        onChange={(e) => setState(e.target.value)}\r\n        defaultValue={defaultValue || \"\"}\r\n      >\r\n        <option value=\"\" disabled>\r\n          {placeholder}\r\n        </option>\r\n        {children}\r\n      </select>\r\n    </CSS>\r\n  );\r\n};\r\n\r\nDropDown.Item = ({ value, children }) => {\r\n  return <option value={value}>{children}</option>;\r\n};\r\n\r\nexport default DropDown;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst grid = createSlice({\r\n  name: \"grid\",\r\n  initialState: {\r\n    gridWidth: 0,\r\n    gridHeight: 0,\r\n    cellWidth: 0,\r\n    startCellIndex: -1,\r\n    endCellIndex: -1,\r\n    status: \"DEFAULT\",\r\n    curAlgo: \"DIJKSTRA\",\r\n    pathDrawn: false,\r\n  },\r\n  reducers: {\r\n    setStartCellIndex(state, { payload }) {\r\n      const oldStart = state.startCellIndex;\r\n      if (oldStart !== -1)\r\n        document.querySelector(`.cell-${oldStart}`).classList.remove(\"START\");\r\n      document.querySelector(`.cell-${payload}`).classList.add(\"START\");\r\n      return {\r\n        ...state,\r\n        startCellIndex: payload,\r\n      };\r\n    },\r\n    setEndCellIndex(state, { payload }) {\r\n      const oldEnd = state.endCellIndex;\r\n      if (oldEnd !== -1)\r\n        document.querySelector(`.cell-${oldEnd}`).classList.remove(\"END\");\r\n      document.querySelector(`.cell-${payload}`).classList.add(\"END\");\r\n      return {\r\n        ...state,\r\n        endCellIndex: payload,\r\n      };\r\n    },\r\n    setStatus(state, { payload }) {\r\n      return {\r\n        ...state,\r\n        status: payload,\r\n      };\r\n    },\r\n    setGridDimensions(state, { payload }) {\r\n      const { width, height, cellWidth } = payload;\r\n      return {\r\n        ...state,\r\n        gridWidth: width,\r\n        gridHeight: height,\r\n        cellWidth,\r\n      };\r\n    },\r\n    setCurAlgo(state, { payload }) {\r\n      return {\r\n        ...state,\r\n        curAlgo: payload,\r\n      };\r\n    },\r\n    setPathDrawn(state, { payload }) {\r\n      return {\r\n        ...state,\r\n        pathDrawn: payload,\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setStartCellIndex,\r\n  setEndCellIndex,\r\n  setStatus,\r\n  setGridDimensions,\r\n  setCurAlgo,\r\n  setPathDrawn,\r\n} = grid.actions;\r\n\r\nexport default grid.reducer;\r\n","import { combineReducers } from 'redux';\r\nimport { persistReducer } from \"redux-persist\"\r\nimport storage from 'redux-persist/lib/storage'\r\nimport grid from './modules/grid';\r\n\r\n// reducers\r\nimport gridReducer from './modules/grid'\r\nimport {reducer as toastrReducer} from 'react-redux-toastr'\r\n\r\nconst rootReducer = combineReducers({\r\n  grid: gridReducer,\r\n  toastr: toastrReducer\r\n})\r\n\r\nexport default rootReducer\r\n\r\n// Template\r\n\r\n// Persist Config:\r\n// const sideBarPersistConfig = {\r\n//   key: \"sidebar\",\r\n//   storage,\r\n//   whitelist: [\"role\", \"sideBarType\"],\r\n// }\r\n// Persist Reducer:\r\n// sidebar: persistReducer(sideBarPersistConfig, sideBarReducer),\r\n\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport { persistStore } from 'redux-persist'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport rootReducer from './reducers.js'\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n)\r\n\r\nconst persistor = persistStore(store)\r\n\r\nexport {\r\n    store,\r\n    persistor\r\n}","import { PriorityQueue, Queue } from \"buckets-js\";\r\nimport { store } from \"../redux/store\";\r\n\r\n// toastr\r\nimport { toastr } from \"react-redux-toastr\";\r\n\r\n// utils\r\nimport { addCellState, cellContains, isValidCell } from \"../utils/funcs\";\r\nimport { COLOR } from \"../utils/constants\";\r\n\r\n// redux\r\nimport { setPathDrawn } from \"../redux/modules/grid\";\r\n\r\n// constants\r\nlet state = store.getState().grid;\r\nlet {\r\n  gridWidth: GRID_WIDTH,\r\n  gridHeight: GRID_HEIGHT,\r\n  startCellIndex: START_INDEX,\r\n  endCellIndex: END_INDEX,\r\n} = state;\r\nlet NUM_OF_CELLS = GRID_HEIGHT * GRID_WIDTH;\r\nlet ANIMATE = !state.pathDrawn;\r\n\r\nstore.subscribe(() => {\r\n  state = store.getState().grid;\r\n  ({\r\n    gridWidth: GRID_WIDTH,\r\n    gridHeight: GRID_HEIGHT,\r\n    startCellIndex: START_INDEX,\r\n    endCellIndex: END_INDEX,\r\n  } = state);\r\n  NUM_OF_CELLS = GRID_HEIGHT * GRID_WIDTH;\r\n  ANIMATE = !state.pathDrawn;\r\n});\r\n\r\nconst TIME_DELAY = 10;\r\n\r\n/**\r\n * Dijkstra's Algorithm Implementation\r\n * @param {*} param0\r\n */\r\nexport const dijkstra = (dispatch) => {\r\n  if (isValidCell(START_INDEX) && isValidCell(END_INDEX)) {\r\n    const cellsDict = {};\r\n    const frontier = new PriorityQueue((a, b) => {\r\n      const aDist = cellsDict[a].distance;\r\n      const bDist = cellsDict[b].distance;\r\n      if (aDist < bDist) {\r\n        return 1;\r\n      } else if (aDist > bDist) {\r\n        return -1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n\r\n    // insert all cells to dict\r\n    for (let idx = 0; idx < NUM_OF_CELLS; idx++) {\r\n      cellsDict[idx] = {\r\n        distance: Infinity,\r\n        prev: null,\r\n        isVisited: false,\r\n        adjacent: [\r\n          !cellIsFarLeft(idx) ? idx - 1 : -1,\r\n          !cellIsFarRight(idx) ? idx + 1 : -1,\r\n          !cellIsFarBottom(idx) ? idx + GRID_WIDTH : -1,\r\n          !cellIsFarTop(idx) ? idx - GRID_WIDTH : -1,\r\n        ],\r\n      };\r\n    }\r\n\r\n    // Initialize PQ and starting cell\r\n    frontier.enqueue(START_INDEX);\r\n\r\n    cellsDict[START_INDEX].isVisited = true;\r\n    cellsDict[START_INDEX].distance = 0;\r\n\r\n    // Start searching\r\n    let cur;\r\n    let timeouts = [];\r\n    let delayedQ = new Queue();\r\n    while (!frontier.isEmpty()) {\r\n      cur = frontier.dequeue();\r\n      delayedQ.enqueue(cur);\r\n\r\n      // visit cell\r\n      if (ANIMATE) {\r\n        timeouts.push(\r\n          setTimeout(() => {\r\n            addCellState(delayedQ.dequeue(), COLOR.VISITED.verbose);\r\n          }, TIME_DELAY * timeouts.length)\r\n        );\r\n      } else {\r\n        addCellState(cur, COLOR.VISITED.verbose);\r\n      }\r\n\r\n      cellsDict[cur].isVisited = true;\r\n\r\n      if (cur === END_INDEX) {\r\n        break;\r\n      }\r\n\r\n      // Check adjacent cells\r\n      const sourceDistance = cellsDict[cur].distance;\r\n      const adjacentList = cellsDict[cur].adjacent;\r\n      for (let i = 0; i < adjacentList.length; i++) {\r\n        let adj = adjacentList[i];\r\n        const newDistance = sourceDistance + 1;\r\n        if (\r\n          isValidCell(adj) &&\r\n          !cellsDict[adj].isVisited &&\r\n          newDistance < cellsDict[adj].distance &&\r\n          !cellContains(adj, COLOR.WALL.verbose)\r\n        ) {\r\n          if (ANIMATE) {\r\n            timeouts.push(\r\n              setTimeout(() => {\r\n                addCellState(adj, COLOR.EXPLORED.verbose);\r\n              }, TIME_DELAY * timeouts.length - i)\r\n            );\r\n          } else {\r\n            addCellState(adj, COLOR.EXPLORED.verbose);\r\n          }\r\n\r\n          cellsDict[adj].distance = newDistance;\r\n          cellsDict[adj].prev = cur;\r\n          frontier.enqueue(adj);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Destination not found\r\n    if (cellsDict[END_INDEX].prev == null) toastr.info(\"No path found\");\r\n\r\n    // draw path\r\n    let curIdx = END_INDEX;\r\n    cur = cellsDict[curIdx];\r\n    let path = [];\r\n    while (curIdx !== null) {\r\n      if (curIdx !== START_INDEX && curIdx !== END_INDEX) path.push(curIdx);\r\n      curIdx = cur.prev;\r\n      cur = cellsDict[cur.prev];\r\n    }\r\n    path.reverse();\r\n\r\n    // draw path\r\n    for (let i = 0; i < path.length; i++) {\r\n      ANIMATE\r\n        ? ((idx) => {\r\n            timeouts.push(\r\n              setTimeout(() => {\r\n                // set path\r\n                addCellState(path[idx], COLOR.PATH.verbose);\r\n                if (i === path.length - 1) animationFinished();\r\n              }, TIME_DELAY * timeouts.length)\r\n            );\r\n          })(i)\r\n        : addCellState(path[i], COLOR.PATH.verbose);\r\n    }\r\n  } else {\r\n    toastr.error(\"Please set starting and ending cell\");\r\n  }\r\n};\r\n/**\r\n * A* Pathfinding Algorithm Implementation\r\n */\r\nexport const aStar = () => {\r\n  if (isValidCell(START_INDEX) && isValidCell(END_INDEX)) {\r\n    const cellsDict = {};\r\n    const frontier = new PriorityQueue((a, b) => {\r\n      const aDist = cellsDict[a].f;\r\n      const bDist = cellsDict[b].f;\r\n      if (aDist < bDist) {\r\n        return 1;\r\n      } else if (aDist > bDist) {\r\n        return -1;\r\n      } else {\r\n        return cellsDict[a].h < cellsDict[b].h ? 1 : -1;\r\n      }\r\n    });\r\n\r\n    // insert all cells to dict\r\n    for (let idx = 0; idx < NUM_OF_CELLS; idx++) {\r\n      cellsDict[idx] = {\r\n        g: Infinity,\r\n        h:\r\n          Math.abs(getXPos(END_INDEX) - getXPos(idx)) +\r\n          Math.abs(getYPos(END_INDEX) - getYPos(idx)),\r\n        f: 0,\r\n        isVisited: false,\r\n        prev: null,\r\n        adjacent: [\r\n          !cellIsFarLeft(idx) ? idx - 1 : -1,\r\n          !cellIsFarRight(idx) ? idx + 1 : -1,\r\n          !cellIsFarBottom(idx) ? idx + GRID_WIDTH : -1,\r\n          !cellIsFarTop(idx) ? idx - GRID_WIDTH : -1,\r\n        ],\r\n      };\r\n    }\r\n\r\n    // Initiate frontier\r\n    cellsDict[START_INDEX].g = 0;\r\n    frontier.enqueue(START_INDEX);\r\n\r\n    // Start path finding\r\n    let timeouts = [];\r\n    const delayedQ = new Queue();\r\n    while (!frontier.isEmpty()) {\r\n      let cur = frontier.dequeue();\r\n      delayedQ.enqueue(cur);\r\n\r\n      // visit cell\r\n      if (ANIMATE) {\r\n        timeouts.push(\r\n          setTimeout(() => {\r\n            addCellState(delayedQ.dequeue(), COLOR.VISITED.verbose);\r\n          }, TIME_DELAY * timeouts.length)\r\n        );\r\n      } else {\r\n        addCellState(cur, COLOR.VISITED.verbose);\r\n      }\r\n\r\n      cellsDict[cur].isVisited = true;\r\n\r\n      let adjacentList = cellsDict[cur].adjacent;\r\n      for (let i = 0; i < adjacentList.length; i++) {\r\n        let adj = adjacentList[i];\r\n        if (isValidCell(adj) && !cellContains(adj, COLOR.WALL.verbose)) {\r\n          // Successor is destination\r\n          let newDist = cellsDict[cur].g + 1;\r\n\r\n          if (cellsDict[adj].g > newDist || adj === END_INDEX) {\r\n            cellsDict[adj].g = newDist;\r\n            cellsDict[adj].f = cellsDict[adj].g + cellsDict[adj].h;\r\n            cellsDict[adj].prev = cur;\r\n\r\n            if (adj !== END_INDEX) {\r\n              ANIMATE\r\n                ? timeouts.push(\r\n                    setTimeout(() => {\r\n                      addCellState(adj, COLOR.EXPLORED.verbose);\r\n                    }, TIME_DELAY * timeouts.length - i)\r\n                  )\r\n                : addCellState(adj, COLOR.EXPLORED.verbose);\r\n              frontier.enqueue(adj);\r\n            } else {\r\n              frontier.clear();\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Draw path\r\n    let curIdx = END_INDEX;\r\n    let cur;\r\n    cur = cellsDict[curIdx];\r\n    let path = [];\r\n    while (curIdx !== null) {\r\n      if (curIdx !== START_INDEX && curIdx !== END_INDEX) path.push(curIdx);\r\n      curIdx = cur.prev;\r\n      cur = cellsDict[cur.prev];\r\n    }\r\n    path.reverse();\r\n\r\n    // draw path\r\n    for (let i = 0; i < path.length; i++) {\r\n      ANIMATE\r\n        ? ((idx) => {\r\n            timeouts.push(\r\n              setTimeout(() => {\r\n                // set path\r\n                addCellState(path[idx], COLOR.PATH.verbose);\r\n                if (i === path.length - 1) animationFinished();\r\n              }, TIME_DELAY * timeouts.length)\r\n            );\r\n          })(i)\r\n        : addCellState(path[i], COLOR.PATH.verbose);\r\n    }\r\n  } else {\r\n    toastr.error(\"Please set starting and ending cell\");\r\n  }\r\n};\r\n\r\n// Utility Functions\r\nconst cellIsFarLeft = (cellNum) => {\r\n  return (cellNum + 1) % GRID_WIDTH === 1;\r\n};\r\n\r\nconst cellIsFarRight = (cellNum) => {\r\n  return (cellNum + 1) % GRID_WIDTH === 0;\r\n};\r\n\r\nconst cellIsFarTop = (cellNum) => {\r\n  return cellNum < GRID_WIDTH;\r\n};\r\n\r\nconst cellIsFarBottom = (cellNum) => {\r\n  return cellNum + 1 >= GRID_WIDTH * (GRID_HEIGHT - 1);\r\n};\r\n\r\nconst getXPos = (cellNum) => {\r\n  return cellNum % GRID_WIDTH;\r\n};\r\n\r\nconst getYPos = (cellNum) => {\r\n  return (cellNum - getXPos(cellNum)) / GRID_WIDTH;\r\n};\r\n\r\nconst animationFinished = () => {\r\n  store.dispatch(setPathDrawn(true));\r\n};\r\n","// algorithms\r\nimport { dijkstra, aStar } from \"../algorithms/index\";\r\n\r\nexport const COLOR = {\r\n  VISITED: {\r\n    verbose: \"VISITED\",\r\n    color: \"rgb(227, 255, 125)\",\r\n  },\r\n  START: {\r\n    verbose: \"START\",\r\n    color: \"rgb(94, 255, 126)\",\r\n  },\r\n  END: {\r\n    verbose: \"END\",\r\n    color: \"rgb(255, 69, 69)\",\r\n  },\r\n  EXPLORED: {\r\n    verbose: \"EXPLORED\",\r\n    color: \"rgb(255, 146, 51)\",\r\n  }, // orange\r\n  DEFAULT: {\r\n    verbose: \"DEFAULT\",\r\n    color: \"white\",\r\n  },\r\n  PATH: {\r\n    verbose: \"PATH\",\r\n    color: \"rgb(140, 140, 140)\",\r\n  },\r\n  WALL: {\r\n    verbose: \"WALL\",\r\n    color: \"black\",\r\n  },\r\n  NONE: {\r\n    verbose: \"NONE\",\r\n    color: \"rgba(0, 0, 0, 0)\",\r\n  },\r\n};\r\n\r\nexport const STATUS = {\r\n  SET_START_CELL: \"SET_START_CELL\",\r\n  SET_END_CELL: \"SET_END_CELL\",\r\n  SET_WALL: \"SET_WALL\",\r\n  DEFAULT: \"DEFAULT\",\r\n};\r\n\r\nexport const WEIGHTED_ALGORITHMS = {\r\n  DIJKSTRA: {\r\n    displayName: \"Dijkstra\",\r\n    func: dijkstra,\r\n  },\r\n  ASTAR: {\r\n    displayName: \"A*\",\r\n    func: aStar,\r\n  },\r\n};\r\n\r\nexport const UNWEIGHTED_ALGORITHMS = {};\r\n","import { store } from \"../redux/store\";\r\n\r\n// constants\r\nimport { COLOR } from \"../utils/constants\";\r\n\r\n// state\r\nlet state = store.getState().grid;\r\nlet { startCellIndex, endCellIndex, gridHeight, gridWidth } = state;\r\nlet NUM_OF_CELLS = gridHeight * gridWidth;\r\nstore.subscribe(() => {\r\n  state = store.getState().grid;\r\n  ({ startCellIndex, endCellIndex, gridHeight, gridWidth } = state);\r\n  NUM_OF_CELLS = gridHeight * gridWidth;\r\n});\r\n\r\nexport const clearCells = () => {\r\n  document.querySelectorAll(\".cell\").forEach((el) => {\r\n    el.classList.remove(\"VISITED\");\r\n    el.classList.remove(\"EXPLORED\");\r\n    el.classList.remove(\"WALL\");\r\n    el.classList.remove(\"START\");\r\n    el.classList.remove(\"END\");\r\n    el.classList.remove(\"PATH\");\r\n  });\r\n};\r\n\r\nexport const isValidCell = (idx) => {\r\n  return idx >= 0 && idx < NUM_OF_CELLS;\r\n};\r\n\r\nexport const clearCell = (cellNum) => {\r\n  if (isValidCell(cellNum)) {\r\n    let cell = document.querySelector(`.cell-${cellNum}`);\r\n    cell.classList.value = `cell cell-${cellNum}`;\r\n  }\r\n};\r\n\r\nexport const addCellState = (cellNum, state) => {\r\n  if (\r\n    isValidCell(cellNum) &&\r\n    cellNum !== startCellIndex &&\r\n    cellNum !== endCellIndex &&\r\n    state !== COLOR.START &&\r\n    state !== COLOR.END\r\n  ) {\r\n    clearCell(cellNum);\r\n    let cell = document.querySelector(`.cell-${cellNum}`);\r\n    cell.classList.add(state);\r\n  }\r\n};\r\n\r\nexport const addEndPoint = (cellNum, state) => {\r\n  if ((isValidCell(cellNum) && state === COLOR.START) || state === COLOR.END) {\r\n    clearCell(cellNum);\r\n    let cell = document.querySelector(`.cell-${cellNum}`);\r\n    cell.classList.add(state);\r\n  }\r\n};\r\n\r\nexport const cellContains = (cellNum, state) => {\r\n  return (\r\n    isValidCell(cellNum) &&\r\n    document.querySelector(`.cell-${cellNum}`).classList.contains(state)\r\n  );\r\n};\r\n\r\nexport const resetPath = () => {\r\n  document.querySelectorAll(\".cell\").forEach((el) => {\r\n    el.classList.remove(\"VISITED\");\r\n    el.classList.remove(\"EXPLORED\");\r\n    el.classList.remove(\"PATH\");\r\n  });\r\n};\r\n\r\nexport const clearWalls = () => {\r\n  document.querySelectorAll(\".cell\").forEach((el) => {\r\n    el.classList.remove(\"WALL\");\r\n  });\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n// components\r\nimport DropDown from \"./DropDown\";\r\n\r\n// utils\r\nimport { clearCells, resetPath, clearWalls } from \"../utils/funcs\";\r\n\r\n// constants\r\nimport {\r\n  STATUS,\r\n  WEIGHTED_ALGORITHMS,\r\n  UNWEIGHTED_ALGORITHMS,\r\n} from \"../utils/constants\";\r\n\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setStatus, setCurAlgo, setPathDrawn } from \"../redux/modules/grid\";\r\n\r\nconst CSS = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  box-sizing: border-box;\r\n  height: 100%;\r\n\r\n  .top,\r\n  .bottom {\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n    padding: 0.4em 1em;\r\n  }\r\n\r\n  .top {\r\n    background: rgb(133, 135, 255);\r\n\r\n    .brand {\r\n      align-items: center;\r\n      h1 {\r\n        color: white;\r\n        font-size: 1.5em;\r\n        margin: 0;\r\n      }\r\n    }\r\n\r\n    button {\r\n      &:hover {\r\n        background-color: rgb(118, 120, 240);\r\n      }\r\n\r\n      &.chosen {\r\n        background-color: rgb(255, 198, 64);\r\n      }\r\n    }\r\n  }\r\n\r\n  .bottom {\r\n    background: white;\r\n    justify-content: center;\r\n    height: 100%;\r\n\r\n    button {\r\n      color: black;\r\n      display: flex;\r\n      justify-content: center;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      cursor: pointer;\r\n      padding: 0.2em;\r\n      border-radius: 0.2em;\r\n      &.chosen,\r\n      &:hover {\r\n        background: rgba(230, 230, 230, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  button {\r\n    outline: none;\r\n    border: none;\r\n    padding: 0.2em 0.5em;\r\n    border-radius: 0.2em;\r\n    cursor: pointer;\r\n    margin: 0 1em;\r\n    font-weight: 400;\r\n    font-size: 1em;\r\n    color: white;\r\n    background: none;\r\n\r\n    &.start-btn {\r\n      &:hover {\r\n        background: rgb(105, 255, 110);\r\n      }\r\n    }\r\n\r\n    &.end-btn {\r\n      &:hover {\r\n        background: rgb(255, 105, 105);\r\n      }\r\n    }\r\n  }\r\n\r\n  .directions {\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 0.2em 0;\r\n    h1 {\r\n      color: black;\r\n      margin: 0;\r\n      font-size: 1em;\r\n      height: 1em;\r\n      font-weight: normal;\r\n    }\r\n  }\r\n`;\r\n\r\nconst MenuBar = () => {\r\n  // Dispatch function\r\n  const dispatch = useDispatch();\r\n\r\n  // global state\r\n  const {\r\n    status,\r\n    curAlgo,\r\n    startCellIndex,\r\n    endCellIndex,\r\n    pathDrawn,\r\n  } = useSelector((state) => state.grid);\r\n\r\n  // On update\r\n  useEffect(() => {\r\n    if (pathDrawn) {\r\n      resetPath();\r\n      WEIGHTED_ALGORITHMS[curAlgo].func();\r\n    }\r\n  }, [startCellIndex, endCellIndex]);\r\n\r\n  const getDirections = () => {\r\n    let message = \"Select one of the options above to start plotting the grid\";\r\n    switch (status) {\r\n      case STATUS.SET_START_CELL:\r\n        message = \"Click anywhere on the grid to set starting point\";\r\n        break;\r\n      case STATUS.SET_END_CELL:\r\n        message = \"Click anywhere on the grid to set ending point\";\r\n        break;\r\n      case STATUS.SET_WALL:\r\n        message = \"Click and drag anywhere on the grid to set walls\";\r\n        break;\r\n    }\r\n    return `* ${message} *`;\r\n  };\r\n\r\n  // Button component\r\n  const StatusButton = ({ checkedStatus, className, children }) => (\r\n    <button\r\n      className={`${className} ${status === checkedStatus ? \"chosen\" : \"\"}`}\r\n      onClick={() => {\r\n        console.log(checkedStatus);\r\n        dispatch(\r\n          setStatus(status === checkedStatus ? STATUS.DEFAULT : checkedStatus)\r\n        );\r\n      }}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n\r\n  return (\r\n    <CSS>\r\n      <div className=\"top\">\r\n        <div className=\"brand\">\r\n          <h1>Pathfinding Visualizer</h1>\r\n        </div>\r\n        <button\r\n          onClick={() => {\r\n            clearCells();\r\n            dispatch(setPathDrawn(false));\r\n          }}\r\n        >\r\n          Clear\r\n        </button>\r\n\r\n        <button onClick={clearWalls}>Clear walls</button>\r\n\r\n        <button\r\n          onClick={() => {\r\n            dispatch(setPathDrawn(false));\r\n            resetPath();\r\n          }}\r\n        >\r\n          Reset\r\n        </button>\r\n\r\n        <DropDown\r\n          placeholder=\"Select Algorithm\"\r\n          setState={(val) => dispatch(setCurAlgo(val))}\r\n          defaultValue={curAlgo}\r\n        >\r\n          <option disabled>-- Weighted --</option>\r\n          {Object.keys(WEIGHTED_ALGORITHMS).map((key, idx) => (\r\n            <DropDown.Item key={idx} value={key}>\r\n              {WEIGHTED_ALGORITHMS[key].displayName}\r\n            </DropDown.Item>\r\n          ))}\r\n          <option disabled>-- Unweighted --</option>\r\n          {Object.keys(UNWEIGHTED_ALGORITHMS).map((key, idx) => (\r\n            <DropDown.Item key={idx} value={key}>\r\n              {WEIGHTED_ALGORITHMS[key].displayName}\r\n            </DropDown.Item>\r\n          ))}\r\n        </DropDown>\r\n\r\n        <button\r\n          onClick={() => {\r\n            resetPath();\r\n            dispatch(setPathDrawn(false));\r\n            WEIGHTED_ALGORITHMS[curAlgo].func();\r\n          }}\r\n        >\r\n          Run\r\n        </button>\r\n      </div>\r\n      <div className=\"bottom\">\r\n        <StatusButton checkedStatus={STATUS.SET_START_CELL}>\r\n          <div className=\"placeholder-cell START\"></div>\r\n          Set starting point\r\n        </StatusButton>\r\n        <StatusButton checkedStatus={STATUS.SET_END_CELL}>\r\n          <div className=\"placeholder-cell END\"></div>\r\n          Set ending point\r\n        </StatusButton>\r\n        <StatusButton checkedStatus={STATUS.SET_WALL}>\r\n          <div className=\"placeholder-cell WALL\"></div>\r\n          Set walls\r\n        </StatusButton>\r\n      </div>\r\n      <div className=\"directions\">\r\n        <h1>{getDirections()}</h1>\r\n      </div>\r\n    </CSS>\r\n  );\r\n};\r\n\r\nexport default MenuBar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n// components\r\nimport MenuBar from \"./MenuBar\";\r\n\r\n// utils & constants\r\nimport { STATUS, COLOR } from \"../utils/constants\";\r\n\r\n// redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setStartCellIndex,\r\n  setEndCellIndex,\r\n  setStatus,\r\n  setGridDimensions,\r\n} from \"../redux/modules/grid\";\r\n\r\n// css constants\r\nconst bg = \"white\";\r\nconst borderColor = \"rgb(196, 195, 199)\";\r\n\r\nconst CSS = styled.div`\r\n  overflow: hidden;\r\n  &,\r\n  & * {\r\n    font-family: Josefin Sans;\r\n  }\r\n\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  background: ${bg};\r\n\r\n  height: 100vh;\r\n\r\n  .cell-container {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 100vw;\r\n    padding-bottom: 1em;\r\n  }\r\n\r\n  .cell,\r\n  .placeholder-cell {\r\n    border: 0.5px solid ${borderColor};\r\n    width: calc(100vw / ${(props) => props.gridWidth});\r\n    height: calc(100vw / ${(props) => props.gridWidth});\r\n    box-sizing: border-box;\r\n    background-color: ${COLOR.DEFAULT.color};\r\n\r\n    ${(props) =>\r\n      ((props) => {\r\n        let colorClasses = \"\";\r\n        console.log(props.animate);\r\n        Object.keys(COLOR).map((key) => {\r\n          colorClasses += `\r\n                    &.${COLOR[key].verbose} {\r\n                        background-color: ${COLOR[key].color};\r\n                        transition: all ${props.animate ? \".5\" : \"0\"}s;\r\n                        animation: grow ${\r\n                          props.animate\r\n                            ? COLOR[key] === COLOR.VISITED ||\r\n                              COLOR[key] === COLOR.EXPLORED\r\n                              ? \".5\"\r\n                              : \".25\"\r\n                            : \"0\"\r\n                        }s;\r\n                        ${\r\n                          COLOR[key] === COLOR.WALL\r\n                            ? `border-color: ${COLOR.WALL.color};`\r\n                            : \"\"\r\n                        }\r\n                    }\r\n                `;\r\n        });\r\n        return colorClasses;\r\n      })(props)}\r\n  }\r\n\r\n  @keyframes grow {\r\n    from {\r\n      transform: scale(0);\r\n    }\r\n    to {\r\n      transform: scale(1);\r\n    }\r\n  }\r\n`;\r\n\r\nconst Grid = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  // global state\r\n  const {\r\n    status,\r\n    gridWidth,\r\n    gridHeight,\r\n    cellWidth,\r\n    endCellIndex,\r\n    startCellIndex,\r\n    pathDrawn,\r\n  } = useSelector((state) => state.grid);\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      setGridDimensions({\r\n        width: 50,\r\n        height: 18,\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  const handleCellClick = (cellNum) => {\r\n    switch (status) {\r\n      case STATUS.SET_START_CELL:\r\n        dispatch(setStartCellIndex(cellNum));\r\n        document.querySelector(`.cell-${cellNum}`).classList.add(\"START\");\r\n        dispatch(setStatus(STATUS.DEFAULT));\r\n        break;\r\n      case STATUS.SET_END_CELL:\r\n        dispatch(setEndCellIndex(cellNum));\r\n        document.querySelector(`.cell-${cellNum}`).classList.add(\"END\");\r\n        dispatch(setStatus(STATUS.DEFAULT));\r\n        break;\r\n      case STATUS.SET_WALL:\r\n        document.querySelector(`.cell-${cellNum}`).classList.add(\"WALL\");\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleMouseOver = (event, cellNum) => {\r\n    event.preventDefault();\r\n    if (event.buttons === 1) {\r\n      if (status === STATUS.SET_WALL) {\r\n        document.querySelector(`.cell-${cellNum}`).classList.add(\"WALL\");\r\n      } else if (status === STATUS.SET_END_CELL) {\r\n        dispatch(setEndCellIndex(cellNum));\r\n      } else if (status === STATUS.SET_START_CELL) {\r\n        dispatch(setStartCellIndex(cellNum));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMouseDown = (event, cellNum) => {\r\n    event.preventDefault();\r\n    if (event.buttons === 1) {\r\n      if (status === STATUS.DEFAULT) {\r\n        if (cellNum === endCellIndex) dispatch(setStatus(STATUS.SET_END_CELL));\r\n        else if (cellNum === startCellIndex)\r\n          dispatch(setStatus(STATUS.SET_START_CELL));\r\n      } else if (status === STATUS.SET_WALL) {\r\n        document.querySelector(`.cell-${cellNum}`).classList.add(\"WALL\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = (event, cellNum) => {\r\n    event.preventDefault();\r\n    if (\r\n      (cellNum === endCellIndex && status === STATUS.SET_END_CELL) ||\r\n      (cellNum === startCellIndex && status === STATUS.SET_START_CELL)\r\n    )\r\n      dispatch(setStatus(STATUS.DEFAULT));\r\n  };\r\n\r\n  return (\r\n    <CSS gridWidth={gridWidth} cellWidth={cellWidth} animate={!pathDrawn}>\r\n      <MenuBar />\r\n      <div className=\"cell-container\">\r\n        {(() => {\r\n          let arr = [];\r\n          for (let idx = 0; idx < gridHeight * gridWidth; idx++) {\r\n            arr.push(\r\n              <div\r\n                key={idx}\r\n                className={`cell cell-${idx}`}\r\n                onClick={() => handleCellClick(idx)}\r\n                onMouseDown={(e) => handleMouseDown(e, idx)}\r\n                onMouseOver={(e) => handleMouseOver(e, idx)}\r\n                onMouseUp={(e) => handleMouseUp(e, idx)}\r\n                // onDrag={(e) => handleDrag(e, idx)}\r\n              ></div>\r\n            );\r\n          }\r\n          return arr;\r\n        })()}\r\n      </div>\r\n    </CSS>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React from 'react'\n\n// Components\nimport Grid from \"./components/Grid\";\n\nconst App = () => {\n  return (\n    <Grid/>\n  )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// redux\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store'\n\n// toastr\nimport ReduxToastr from 'react-redux-toastr'\nimport 'react-redux-toastr/lib/css/react-redux-toastr.min.css'\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n    <ReduxToastr\n      timeOut={4000}\n      newestOnTop={false}\n      preventDuplicates\n      position=\"top-right\"\n      getState={(state) => state.toastr} // This is the default\n      transitionIn=\"fadeIn\"\n      transitionOut=\"fadeOut\"\n      progressBar\n      closeOnToastrClick\n    />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}